source('~/Dropbox/DataMining_FinalProject/dataForWeka/shortening_data.r')
m = atan(10^m)*180/pi;u = atan(10^u)*180/pi;l = atan(10^l)*180/pi
source('~/Dropbox/gibbs_plots/allresults/Ksenia_confIntervals.R')
x_volc
x_vol
clc
dim(x_vol)
dims(x_vol)
length(x_vol)
vol
Â¬ - 1
v
length(v)
length((m)
u
u
l
m
plot(m)
plot(m)
m
max(m)
plot(u)
plot(x_vol,m,ylim = ylim,col = "red", type = "l",lwd = 3,lty = 2,pch = ".",     main = "", xlab = "", ylab = "",xlim =xlim)
sa
asda
plot(x_vol,m,ylim = ylim,col = "red", type = "l",lwd = 3,lty = 2,pch = ".",     main = "", xlab = "", ylab = "",xlim =xlim)
main = "", xlab = "", ylab = "",xlim =xlim)
main = "", xlab = "", ylab = "",xlim =xlim)
plot(x_vol,m,ylim = ylim,col = "red", type = "l",lwd = 3,lty = 2,pch = ".",     main = "", xlab = "", ylab = "",xlim =xlim)
plot(x_vol,m,ylim = ylim,col = "red", type = "l",lwd = 3,lty = 2,pch = ".",main = "", xlab = "", ylab = "",xlim =xlim)
par(new=TRUE)
plot(x_vol,l,ylim = ylim,col = "blue", type = "l",lwd = 3,pch = ".",     main = "",     xlab = "Volume/ 10^6", ylab = "Basal friction in degrees",xlim =xlim)
plot(x_vol,l,ylim = ylim,col = "blue", type = "l",lwd = 3,pch = ".",     main = "",xlab = "Volume/ 10^6", ylab = "Basal friction in degrees",xlim =xlim)
plot(x_vol,l,ylim = ylim,col = "blue", type = "l",lwd = 3,pch = ".",main = "",xlab = "Volume/ 10^6", ylab = "Basal friction in degrees",xlim =xlim)
source('~/Dropbox/gibbs_plots/allresults/Ksenia_confIntervals.R')
source('~/Dropbox/gibbs_plots/allresults/Ksenia_confIntervals.R')
source('~/Dropbox/gibbs_plots/allresults/Ksenia_confIntervals.R')
?optim
clc
clear
xin = c(1,2)
xin
xin(1)
xin[1]
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
fun([1,3])
fun(c(1,3)
)
fun(c(1,3))
r = fun(c(1,3))
r
?meshgrid
install.packages("AtmRay")
library('AtmRay')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
meshgrid(1:5,1:3)
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
xg
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/.active-rstudio-document')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
ls()
?meshgrid
meshgrid(xg,yg)
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
meshgrid(xg,yg)
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
xm
1:2:10
seq(1,10,2)
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
persp(xm,ym,zm)
?persp
options(help_type="html")
?persp
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
?persp
?persp
persp(xg,yg,zm)
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
persp(xg,yg,zm)
?persp
persp(zm)
zm
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
zm
clc
persp(zm)
persp(xg,yg,zm)
contour(zm)
persp(xg,yg,zm,xlab='das')
contour(zm,xlab='as')
contour(xg,yg,zm)
filled(xg,yg,zm)
filled.contour(xg,yg,zm)
options
options()
h = options()
h
length(h)
h
names(h)
h[browser]
h["browser"]
h$browser
contour(xm,ym,zm)
contour(xg,yg,zm)
contour(xg,yg,zm,levels=1.5)
?lhs
install.packages("lhs")
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(help="lhs")
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
xx
plot(xx[,1],xx[,2])
plot(xx[,1],xx[,2], type='p')
plot(xx[,1],xx[,2], type='l')
plot(xx[,1],xx[,2], type='o')
plot(xx[,1],xx[,2], type='n')
plot(xx[,1],xx[,2], type='h')
plot(xx[,1],xx[,2], type='s')
plot(xx[,1],xx[,2], type='p')
plot(xx[,1],xx[,2], type='p', col='red')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
plot(xx[,1],xx[,2], pch=21)
plot(xx[,1],xx[,2], type='p',pch=21)
plot(xx[,1],xx[,2], type='p',pch=21,col='red')
plot(xx[,1],xx[,2], type='p',pch=19,col='red')
plot(xx[,1],xx[,2], type='p',pch=19)
plot(xx[,1],xx[,2],pch=19)
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
cat("\014")
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
rm(list=ls())
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
xx
y
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
install.packages("GPfit")
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
version()
version
install.packages("installr")
source('~/Dropbox/longvalleyTitan/learnSeqExpPaper/seqpaper.R')
y
m1s
i
cor(conts[[1]][1:100,1],conts[[i]][1:100,1])
??cor
?cor
rnorm(5)
v1 <- rnorm(50)
v2 <- rexp(50)
v2 <- rexp(50*)
plot(v1,v2)
plot(v2,v1)
plot(v2,v1, main='test')
plot(v2,v1, main='A very Interesting Plot')
plot(v2,v1, main='A Very Interesting Plot')
v3 <- rnorm(n=50, mean=10,sd=0.1)
hist(x=v3)
hist(x=v3,xlab='some random variable')
v3 <- rnorm(n=50, mean=10,sd=0.1)
hist(x=v3,xlab='some variable')
source('~/Documents/samsi_workshop/SAMSI/plume_plots.R', echo=TRUE)
install.packages('ggplot2')
install.packages(ggplot2)
install.packages("ggplot2")
library(plyr)
library(sp)
library(maps)
library(maptools)
library(ggplot2)
states = unique(dat$STA) #all unique US states
LL.dat #combination of lon-lat
times = unique(dat$TME)
## ... for time
sum.CMAQ.times = ldply(1:length(times),function(ind){quantile(dat$CMAQ[((ind-1)*300^2+1):(ind*300^2)],probs=c(0.1,0.25,0.5,0.75,0.90))})
sum.HYSP.times = ldply(1:length(times),function(ind){quantile(dat$HYSP[((ind-1)*300^2+1):(ind*300^2)],probs=c(0.1,0.25,0.5,0.75,0.90))})
boxplot(t(sum.CMAQ.times),xlab="Day",ylab="CMAQ",main="CMAQ vs. time boxplots")
boxplot(t(sum.HYSP.times),xlab="Day",ylab="HYSP",main="HYSP vs. time boxplots")
## ... for coord
sum.CMAQ.coord = ldply(1:300^2,function(ind){quantile(dat$CMAQ[seq(from=ind,by=300^2,length.out=length(times))],probs=c(0.1,0.25,0.5,0.75,0.90))})
sum.HYSP.coord = ldply(1:300^2,function(ind){quantile(dat$HYSP[seq(from=ind,by=300^2,length.out=length(times))],probs=c(0.1,0.25,0.5,0.75,0.90))})
sum.DIFF.coord = sum.CMAQ.coord - sum.HYSP.coord #differences between quantiles
names(sum.HYSP.coord) = names(sum.CMAQ.coord) = names(sum.HYSP.coord) = c("ten","twf","fif","svf","nin")
load("~/Dropbox/samsi_workshop/SAMSI/PM.Rdata")
#compute exploratory statistics
states = unique(dat$STA) #all unique US states
LL.dat #combination of lon-lat
times = unique(dat$TME)
## ... for coord
sum.CMAQ.coord = ldply(1:300^2,function(ind){quantile(dat$CMAQ[seq(from=ind,by=300^2,length.out=length(times))],probs=c(0.1,0.25,0.5,0.75,0.90))})
sum.HYSP.coord = ldply(1:300^2,function(ind){quantile(dat$HYSP[seq(from=ind,by=300^2,length.out=length(times))],probs=c(0.1,0.25,0.5,0.75,0.90))})
sum.DIFF.coord = sum.CMAQ.coord - sum.HYSP.coord #differences between quantiles
names(sum.HYSP.coord) = names(sum.CMAQ.coord) = names(sum.HYSP.coord) = c("ten","twf","fif","svf","nin")
## inputs
summ = sum.CMAQ.coord #summary matrix
str = "CMAQ"
quant = 0.25
ind = switch(as.character(quant),"0.1"=1,"0.25"=2,"0.5"=3,"0.75"=4,"0.9"=5)
us.dat <- map_data("state")
ct.dat <- map_data("county")
ggplot() +
geom_polygon(aes(long, lat, group=group), fill="lightgrey", data=ct.dat) +
geom_polygon(aes(long, lat, group=group), color='white', fill=NA,
data=us.dat) +
geom_point(data = summ,
aes(x=LL.dat[,1],y = LL.dat[,2],colour=summ[,ind]),
size=0.8, alpha = 0.2) +
scale_colour_gradient(low = 'yellow', high = "red") +
theme_bw() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(face="bold", vjust=1),
legend.key = element_rect(fill='gray65')) +
ggtitle(paste(str," - ",quant*100,"%"))
# ggsave(paste("HYSPLIT Smoke on", filenms[i], ".png", sep=""))
#getting state names
lon.lower = -120
lon.upper = -75
lon.val = seq(from=lon.lower,to=lon.upper,length.out=300)
lat.lower = 49
lat.upper = 26
lat.val = seq(from=lat.lower,to=lat.upper,length.out=300)
LL.dat = data.frame(LON=rep(lon.val,300),LAT=rep(lat.val,each=300))
state.names = latlong2state(LL.dat)
#LON-LAT to state
latlong2state <- function(pointsDF) {
states <- map('state', fill=TRUE, col="transparent", plot=FALSE)
IDs <- sapply(strsplit(states$names, ":"), function(x) x[1])
states_sp <- map2SpatialPolygons(states, IDs=IDs,
proj4string=CRS("+proj=longlat +datum=wgs84"))
# Convert pointsDF to a SpatialPoints object
pointsSP <- SpatialPoints(pointsDF,
proj4string=CRS("+proj=longlat +datum=wgs84"))
# Use 'over' to get _indices_ of the Polygons object containing each point
indices <- over(pointsSP, states_sp)
# Return the state names of the Polygons object containing each point
stateNames <- sapply(states_sp@polygons, function(x) x@ID)
stateNames[indices]
}
#
#getting state names
lon.lower = -120
lon.upper = -75
lon.val = seq(from=lon.lower,to=lon.upper,length.out=300)
lat.lower = 49
lat.upper = 26
lat.val = seq(from=lat.lower,to=lat.upper,length.out=300)
LL.dat = data.frame(LON=rep(lon.val,300),LAT=rep(lat.val,each=300))
state.names = latlong2state(LL.dat)
## ... for coord
sum.CMAQ.coord = ldply(1:300^2,function(ind){quantile(dat$CMAQ[seq(from=ind,by=300^2,length.out=length(times))],probs=c(0.1,0.25,0.5,0.75,0.90))})
sum.HYSP.coord = ldply(1:300^2,function(ind){quantile(dat$HYSP[seq(from=ind,by=300^2,length.out=length(times))],probs=c(0.1,0.25,0.5,0.75,0.90))})
sum.DIFF.coord = sum.CMAQ.coord - sum.HYSP.coord #differences between quantiles
names(sum.HYSP.coord) = names(sum.CMAQ.coord) = names(sum.HYSP.coord) = c("ten","twf","fif","svf","nin")
## inputs
summ = sum.CMAQ.coord #summary matrix
str = "CMAQ"
quant = 0.25
ind = switch(as.character(quant),"0.1"=1,"0.25"=2,"0.5"=3,"0.75"=4,"0.9"=5)
us.dat <- map_data("state")
ct.dat <- map_data("county")
ggplot() +
geom_polygon(aes(long, lat, group=group), fill="lightgrey", data=ct.dat) +
geom_polygon(aes(long, lat, group=group), color='white', fill=NA,
data=us.dat) +
geom_point(data = summ,
aes(x=LL.dat[,1],y = LL.dat[,2],colour=summ[,ind]),
size=0.8, alpha = 0.2) +
scale_colour_gradient(low = 'yellow', high = "red") +
theme_bw() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(face="bold", vjust=1),
legend.key = element_rect(fill='gray65')) +
ggtitle(paste(str," - ",quant*100,"%"))
# ggsave(paste("HYSPLIT Smoke on", filenms[i], ".png", sep=""))
## ... by state
ind = state.names==states[3]
ind[is.na(ind)] = F
ind = which(ind)
ind = c(as.matrix(ldply(ind,function(x){seq(from=x,by=300^2,length.out=length(times))})))
rm(list=ls())
load("~/Dropbox/samsi_workshop/SAMSI/PM.Rdata")
names(dat)
dat[1:3,]
summary(dat)
clc
thetas1 = data.frame(matrix(0,nrow=nsamples,ncol=nvolc));
setwd("~/Dropbox/GibbSamplers/hlm_R")
# Read in data files.
clm = read.table('Clm_Vol_area.txt',header=F);
mrp = read.table('Mrp_Vol_area.txt',header=F);
shv = read.table('Shv_Vol_area.txt',header=F);
unz = read.table('Unz_Vol_area.txt',header=F);
aug = read.table('Aug_Vol_area.txt',header=F);
alldata = list(clm=clm,mrp=mrp,shv=shv,unz=unz,aug=aug);
fnames= c('clm','mrp','shv','unz','aug');
snames = names(alldata);
nvolc = length(alldata);
polys = data.frame(matrix(nrow=2,ncol=5));
colnames(polys) = snames;
njs = rep(0,nvolc);
xj = rep(0,nvolc);
svar = rep(0,nvolc);
for (i in 1:nvolc){
alldata[[i]][,1] = alldata[[i]][,1]/1000;
alldata[[i]][,1] = alldata[[i]][,1]^(2/3);
alldata[[i]] = log10(alldata[[i]]);
linm = lm(alldata[[i]][,2]~alldata[[i]][,1]);
polys[i] = linm$coefficients;
njs[i] = length(alldata[[i]][,1]);
xj[i] = mean(alldata[[i]][,1]);
svar[i] = sum((alldata[[i]][,1] - xj[i])^2);
}
nsamples = 10000; ########################################### sampling size
nflows = sum(njs);
# Allocating spaces for the dataframes and arrays.
thetas1 = data.frame(matrix(0,nrow=nsamples,ncol=nvolc));
colnames(thetas1) = snames;
thetas2 = data.frame(matrix(0,nrow=nsamples,ncol=nvolc));
colnames(thetas2) = snames;
mus = rep(0,nsamples);
st2.lst = rep(0,nsamples);
sj2.lst = data.frame(matrix(0,nrow=nsamples,ncol=nvolc));
lams = rep(0,nsamples);
# Initializing first values in matrices
t1 = as.numeric(polys[1,]);
t2 = as.numeric(polys[2,]);
thetas1[1,] = t1;
thetas2[1,] = t2;
mus[1] = mean(t2);
sj2init = lapply(alldata,function(x) var(x[,1]));
sj2.lst[1,] = as.numeric(sj2init);
st2.lst[1] = var(t2);
svar1 = svar[1:2];
svar2 = svar[3:nvolc];
vj.func <- function(s.j2,s.t2,Sj.part){(s.j2/Sj.part) + s.t2};
mu.hat.func <- function(t2j,s.j2,s.t2,Sj.part){
sum(t2j/vj.func(s.j2,s.t2,Sj.part))/sum(1/vj.func(s.j2,s.t2,Sj.part))};
mv.rnorm <- function(means,sds){
n = length(means);
samples = numeric(length=n);
for(i in 1:n){
samples[i] = rnorm(n=1,mean=means[i],sd=sds[i])
}
return(samples)
}
dim(thetas1)
head(thetas1)
svar
# Read in data files.
# These are log10 values.
clm = read.table('Clm_Vol_CoefFriction.txt',header=0);
mrp = read.table('Mrp_Vol_CoefFriction.txt',header=0);
shv = read.table('Shv_Vol_CoefFriction.txt',header=0);
unz = read.table('Unz_Vol_CoefFriction.txt',header=0);
smr = read.table('Smr_Vol_CoefFriction.txt',header=0);
alldata = list(clm=clm,mrp=mrp,shv=shv,unz=unz,smr=smr);
fnames= c('clm','mrp','shv','unz','smr');
snames = names(alldata);
nvolc = length(alldata);
mid = 10^5.5;
polys = data.frame(matrix(nrow=2,ncol=5));
colnames(polys) = snames;
njs = rep(0,nvolc);
xj = rep(0,nvolc);
svar = rep(0,nvolc);
for (i in 1:nvolc){
alldata[[i]][,2] = alldata[[i]][,2] * 1e6;
alldata[[i]][,2] = alldata[[i]][,2]/mid;
alldata[[i]] = log10(alldata[[i]]);
linm = lm(alldata[[i]][,1]~alldata[[i]][,2]);
polys[i] = linm$coefficients;
njs[i] = length(alldata[[i]][,1]);
xj[i] = mean(alldata[[i]][,2]);
svar[i] = sum((alldata[[i]][,2] - xj[i])^2);
}
svar
xj
